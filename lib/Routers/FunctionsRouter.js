"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FunctionsRouter = void 0;

var _PromiseRouter = _interopRequireDefault(require("../PromiseRouter"));

var _middlewares = require("../middlewares");

var _StatusHandler = require("../StatusHandler");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = require("../logger");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// FunctionsRouter.js
var Parse = require('parse/node').Parse,
    triggers = require('../triggers');

// $JMJ: UPDATED
exports.REPLACE_CRASH_ERRORS_WITH_MESSAGE = true;

function parseObject(obj) {
  if (Array.isArray(obj)) {
    return obj.map(item => {
      return parseObject(item);
    });
  } else if (obj && obj.__type == 'Date') {
    return Object.assign(new Date(obj.iso), obj);
  } else if (obj && obj.__type == 'File') {
    return Parse.File.fromJSON(obj);
  } else if (obj && typeof obj === 'object') {
    return parseParams(obj);
  } else {
    return obj;
  }
}

function parseParams(params) {
  return _lodash.default.mapValues(params, parseObject);
}

class FunctionsRouter extends _PromiseRouter.default {
  mountRoutes() {
    this.route('POST', '/functions/:functionName', _middlewares.promiseEnsureIdempotency, FunctionsRouter.handleCloudFunction);
    this.route('POST', '/jobs/:jobName', _middlewares.promiseEnsureIdempotency, _middlewares.promiseEnforceMasterKeyAccess, function (req) {
      return FunctionsRouter.handleCloudJob(req);
    });
    this.route('POST', '/jobs', _middlewares.promiseEnforceMasterKeyAccess, function (req) {
      return FunctionsRouter.handleCloudJob(req);
    });
  }

  static handleCloudJob(req) {
    const jobName = req.params.jobName || req.body.jobName;
    const applicationId = req.config.applicationId;
    const jobHandler = (0, _StatusHandler.jobStatusHandler)(req.config);
    const jobFunction = triggers.getJob(jobName, applicationId);

    if (!jobFunction) {
      throw new Parse.Error(Parse.Error.SCRIPT_FAILED, 'Invalid job.');
    }

    let params = Object.assign({}, req.body, req.query);
    params = parseParams(params);
    const request = {
      params: params,
      log: req.config.loggerController,
      headers: req.config.headers,
      ip: req.config.ip,
      jobName,
      message: jobHandler.setMessage.bind(jobHandler)
    };
    return jobHandler.setRunning(jobName, params).then(jobStatus => {
      request.jobId = jobStatus.objectId; // run the function async

      process.nextTick(() => {
        Promise.resolve().then(() => {
          return jobFunction(request);
        }).then(result => {
          jobHandler.setSucceeded(result);
        }, error => {
          jobHandler.setFailed(error); // $JMJ: modified
          // Use handler defined in $error.js

          if (global.HandleJobError) {
            HandleJobError(jobName, params, error);
          }
        });
      });
      return {
        headers: {
          'X-Parse-Job-Status-Id': jobStatus.objectId
        },
        response: {}
      };
    });
  }

  static createResponseObject(userString
  /* $JMJ: Modified in fork. */
  , resolve, reject) {
    return {
      success: function (result) {
        resolve({
          response: {
            result: Parse._encode(result)
          }
        });
      },
      error: function (message) {
        // $JMJ: Modified in fork.
        if (message instanceof Error) {
          if (message instanceof CloudError) {
            message = message.message;
          } else {
            // Use handler defined in $error.js
            if (global.HandleServerCrash) {
              HandleServerCrash(message.stack, userString);
            }

            if (exports.REPLACE_CRASH_ERRORS_WITH_MESSAGE) {
              // Replace crash error message for clients.
              message = 'Something went wrong. Please try again or contact support.';
            } else {
              message = message.message;
            }

            message = 'Something went wrong. Please try again or contact support.';
          }
        } // if (message instanceof Error) {
        //   message = message.message;
        // }


        const error = triggers.resolveError(message);
        reject(error);
      }
    };
  }

  static handleCloudFunction(req) {
    const functionName = req.params.functionName;
    const applicationId = req.config.applicationId;
    const theFunction = triggers.getFunction(functionName, applicationId);

    if (!theFunction) {
      throw new Parse.Error(Parse.Error.SCRIPT_FAILED, `Invalid function: "${functionName}"`);
    }

    let params = Object.assign({}, req.body, req.query);
    params = parseParams(params);
    const request = {
      params: params,
      master: req.auth && req.auth.isMaster,
      user: req.auth && req.auth.user,
      installationId: req.info.installationId,
      log: req.config.loggerController,
      headers: req.config.headers,
      ip: req.config.ip,
      functionName,
      context: req.info.context
    };
    return new Promise(function (resolve, reject) {
      const userString = req.auth && req.auth.user ? req.auth.user.id : undefined;

      const cleanInput = _logger.logger.truncateLogMessage(JSON.stringify(params));

      const {
        success,
        error
      } = FunctionsRouter.createResponseObject(userString,
      /* $JMJ: Modified in fork. */
      result => {
        try {
          const cleanResult = _logger.logger.truncateLogMessage(JSON.stringify(result.response.result));

          _logger.logger.info(`Ran cloud function ${functionName} for user ${userString} with:\n  Input: ${cleanInput}\n  Result: ${cleanResult}`, {
            functionName,
            params,
            user: userString
          });

          resolve(result);
        } catch (e) {
          reject(e);
        }
      }, error => {
        try {
          _logger.logger.error(`Failed running cloud function ${functionName} for user ${userString} with:\n  Input: ${cleanInput}\n  Error: ` + JSON.stringify(error), {
            functionName,
            error,
            params,
            user: userString
          });

          reject(error); // $JMJ: modified
          // Use handler defined in $error.js

          if (global.HandleCloudFunctionError) {
            HandleCloudFunctionError(functionName, params, error, userString);
          }
        } catch (e) {
          reject(e);
        }
      });
      return Promise.resolve().then(() => {
        return triggers.maybeRunValidator(request, functionName);
      }).then(() => {
        return theFunction(request);
      }).then(success, error);
    });
  }

}

exports.FunctionsRouter = FunctionsRouter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Sb3V0ZXJzL0Z1bmN0aW9uc1JvdXRlci5qcyJdLCJuYW1lcyI6WyJQYXJzZSIsInJlcXVpcmUiLCJ0cmlnZ2VycyIsImV4cG9ydHMiLCJSRVBMQUNFX0NSQVNIX0VSUk9SU19XSVRIX01FU1NBR0UiLCJwYXJzZU9iamVjdCIsIm9iaiIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsIml0ZW0iLCJfX3R5cGUiLCJPYmplY3QiLCJhc3NpZ24iLCJEYXRlIiwiaXNvIiwiRmlsZSIsImZyb21KU09OIiwicGFyc2VQYXJhbXMiLCJwYXJhbXMiLCJfIiwibWFwVmFsdWVzIiwiRnVuY3Rpb25zUm91dGVyIiwiUHJvbWlzZVJvdXRlciIsIm1vdW50Um91dGVzIiwicm91dGUiLCJwcm9taXNlRW5zdXJlSWRlbXBvdGVuY3kiLCJoYW5kbGVDbG91ZEZ1bmN0aW9uIiwicHJvbWlzZUVuZm9yY2VNYXN0ZXJLZXlBY2Nlc3MiLCJyZXEiLCJoYW5kbGVDbG91ZEpvYiIsImpvYk5hbWUiLCJib2R5IiwiYXBwbGljYXRpb25JZCIsImNvbmZpZyIsImpvYkhhbmRsZXIiLCJqb2JGdW5jdGlvbiIsImdldEpvYiIsIkVycm9yIiwiU0NSSVBUX0ZBSUxFRCIsInF1ZXJ5IiwicmVxdWVzdCIsImxvZyIsImxvZ2dlckNvbnRyb2xsZXIiLCJoZWFkZXJzIiwiaXAiLCJtZXNzYWdlIiwic2V0TWVzc2FnZSIsImJpbmQiLCJzZXRSdW5uaW5nIiwidGhlbiIsImpvYlN0YXR1cyIsImpvYklkIiwib2JqZWN0SWQiLCJwcm9jZXNzIiwibmV4dFRpY2siLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlc3VsdCIsInNldFN1Y2NlZWRlZCIsImVycm9yIiwic2V0RmFpbGVkIiwiZ2xvYmFsIiwiSGFuZGxlSm9iRXJyb3IiLCJyZXNwb25zZSIsImNyZWF0ZVJlc3BvbnNlT2JqZWN0IiwidXNlclN0cmluZyIsInJlamVjdCIsInN1Y2Nlc3MiLCJfZW5jb2RlIiwiQ2xvdWRFcnJvciIsIkhhbmRsZVNlcnZlckNyYXNoIiwic3RhY2siLCJyZXNvbHZlRXJyb3IiLCJmdW5jdGlvbk5hbWUiLCJ0aGVGdW5jdGlvbiIsImdldEZ1bmN0aW9uIiwibWFzdGVyIiwiYXV0aCIsImlzTWFzdGVyIiwidXNlciIsImluc3RhbGxhdGlvbklkIiwiaW5mbyIsImNvbnRleHQiLCJpZCIsInVuZGVmaW5lZCIsImNsZWFuSW5wdXQiLCJsb2dnZXIiLCJ0cnVuY2F0ZUxvZ01lc3NhZ2UiLCJKU09OIiwic3RyaW5naWZ5IiwiY2xlYW5SZXN1bHQiLCJlIiwiSGFuZGxlQ2xvdWRGdW5jdGlvbkVycm9yIiwibWF5YmVSdW5WYWxpZGF0b3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFLQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQVRBO0FBRUEsSUFBSUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsWUFBRCxDQUFQLENBQXNCRCxLQUFsQztBQUFBLElBQ0VFLFFBQVEsR0FBR0QsT0FBTyxDQUFDLGFBQUQsQ0FEcEI7O0FBU0E7QUFDQUUsT0FBTyxDQUFDQyxpQ0FBUixHQUE0QyxJQUE1Qzs7QUFFQSxTQUFTQyxXQUFULENBQXFCQyxHQUFyQixFQUEwQjtBQUN4QixNQUFJQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0YsR0FBZCxDQUFKLEVBQXdCO0FBQ3RCLFdBQU9BLEdBQUcsQ0FBQ0csR0FBSixDQUFRQyxJQUFJLElBQUk7QUFDckIsYUFBT0wsV0FBVyxDQUFDSyxJQUFELENBQWxCO0FBQ0QsS0FGTSxDQUFQO0FBR0QsR0FKRCxNQUlPLElBQUlKLEdBQUcsSUFBSUEsR0FBRyxDQUFDSyxNQUFKLElBQWMsTUFBekIsRUFBaUM7QUFDdEMsV0FBT0MsTUFBTSxDQUFDQyxNQUFQLENBQWMsSUFBSUMsSUFBSixDQUFTUixHQUFHLENBQUNTLEdBQWIsQ0FBZCxFQUFpQ1QsR0FBakMsQ0FBUDtBQUNELEdBRk0sTUFFQSxJQUFJQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0ssTUFBSixJQUFjLE1BQXpCLEVBQWlDO0FBQ3RDLFdBQU9Y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QUFULENBQTJCckQsT0FBM0IsRUFBb0NpQyxZQUFwQyxDQUFQO0FBQ0QsT0FISSxFQUlKeEIsSUFKSSxDQUlDLE1BQU07QUFDVixlQUFPeUIsV0FBVyxDQUFDbEMsT0FBRCxDQUFsQjtBQUNELE9BTkksRUFPSlMsSUFQSSxDQU9Da0IsT0FQRCxFQU9VUixLQVBWLENBQVA7QUFRRCxLQXhETSxDQUFQO0FBeUREOztBQXRNZ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGdW5jdGlvbnNSb3V0ZXIuanNcblxudmFyIFBhcnNlID0gcmVxdWlyZSgncGFyc2Uvbm9kZScpLlBhcnNlLFxuICB0cmlnZ2VycyA9IHJlcXVpcmUoJy4uL3RyaWdnZXJzJyk7XG5cbmltcG9ydCBQcm9taXNlUm91dGVyIGZyb20gJy4uL1Byb21pc2VSb3V0ZXInO1xuaW1wb3J0IHsgcHJvbWlzZUVuZm9yY2VNYXN0ZXJLZXlBY2Nlc3MsIHByb21pc2VFbnN1cmVJZGVtcG90ZW5jeSB9IGZyb20gJy4uL21pZGRsZXdhcmVzJztcbmltcG9ydCB7IGpvYlN0YXR1c0hhbmRsZXIgfSBmcm9tICcuLi9TdGF0dXNIYW5kbGVyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi9sb2dnZXInO1xuXG4vLyAkSk1KOiBVUERBVEVEXG5leHBvcnRzLlJFUExBQ0VfQ1JBU0hfRVJST1JTX1dJVEhfTUVTU0FHRSA9IHRydWU7XG5cbmZ1bmN0aW9uIHBhcnNlT2JqZWN0KG9iaikge1xuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG9iai5tYXAoaXRlbSA9PiB7XG4gICAgICByZXR1cm4gcGFyc2VPYmplY3QoaXRlbSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAob2JqICYmIG9iai5fX3R5cGUgPT0gJ0RhdGUnKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IERhdGUob2JqLmlzbyksIG9iaik7XG4gIH0gZWxzZSBpZiAob2JqICYmIG9iai5fX3R5cGUgPT0gJ0ZpbGUnKSB7XG4gICAgcmV0dXJuIFBhcnNlLkZpbGUuZnJvbUpTT04ob2JqKTtcbiAgfSBlbHNlIGlmIChvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gcGFyc2VQYXJhbXMob2JqKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlUGFyYW1zKHBhcmFtcykge1xuICByZXR1cm4gXy5tYXBWYWx1ZXMocGFyYW1zLCBwYXJzZU9iamVjdCk7XG59XG5cbmV4cG9ydCBjbGFzcyBGdW5jdGlvbnNSb3V0ZXIgZXh0ZW5kcyBQcm9taXNlUm91dGVyIHtcbiAgbW91bnRSb3V0ZXMoKSB7XG4gICAgdGhpcy5yb3V0ZShcbiAgICAgICdQT1NUJyxcbiAgICAgICcvZnVuY3Rpb25zLzpmdW5jdGlvbk5hbWUnLFxuICAgICAgcHJvbWlzZUVuc3VyZUlkZW1wb3RlbmN5LFxuICAgICAgRnVuY3Rpb25zUm91dGVyLmhhbmRsZUNsb3VkRnVuY3Rpb25cbiAgICApO1xuICAgIHRoaXMucm91dGUoXG4gICAgICAnUE9TVCcsXG4gICAgICAnL2pvYnMvOmpvYk5hbWUnLFxuICAgICAgcHJvbWlzZUVuc3VyZUlkZW1wb3RlbmN5LFxuICAgICAgcHJvbWlzZUVuZm9yY2VNYXN0ZXJLZXlBY2Nlc3MsXG4gICAgICBmdW5jdGlvbiAocmVxKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbnNSb3V0ZXIuaGFuZGxlQ2xvdWRKb2IocmVxKTtcbiAgICAgIH1cbiAgICApO1xuICAgIHRoaXMucm91dGUoJ1BPU1QnLCAnL2pvYnMnLCBwcm9taXNlRW5mb3JjZU1hc3RlcktleUFjY2VzcywgZnVuY3Rpb24gKHJlcSkge1xuICAgICAgcmV0dXJuIEZ1bmN0aW9uc1JvdXRlci5oYW5kbGVDbG91ZEpvYihyZXEpO1xuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGhhbmRsZUNsb3VkSm9iKHJlcSkge1xuICAgIGNvbnN0IGpvYk5hbWUgPSByZXEucGFyYW1zLmpvYk5hbWUgfHwgcmVxLmJvZHkuam9iTmFtZTtcbiAgICBjb25zdCBhcHBsaWNhdGlvbklkID0gcmVxLmNvbmZpZy5hcHBsaWNhdGlvbklkO1xuICAgIGNvbnN0IGpvYkhhbmRsZXIgPSBqb2JTdGF0dXNIYW5kbGVyKHJlcS5jb25maWcpO1xuICAgIGNvbnN0IGpvYkZ1bmN0aW9uID0gdHJpZ2dlcnMuZ2V0Sm9iKGpvYk5hbWUsIGFwcGxpY2F0aW9uSWQpO1xuICAgIGlmICgham9iRnVuY3Rpb24pIHtcbiAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5TQ1JJUFRfRkFJTEVELCAnSW52YWxpZCBqb2IuJyk7XG4gICAgfVxuICAgIGxldCBwYXJhbXMgPSBPYmplY3QuYXNzaWduKHt9LCByZXEuYm9keSwgcmVxLnF1ZXJ5KTtcbiAgICBwYXJhbXMgPSBwYXJzZVBhcmFtcyhwYXJhbXMpO1xuICAgIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgIGxvZzogcmVxLmNvbmZpZy5sb2dnZXJDb250cm9sbGVyLFxuICAgICAgaGVhZGVyczogcmVxLmNvbmZpZy5oZWFkZXJzLFxuICAgICAgaXA6IHJlcS5jb25maWcuaXAsXG4gICAgICBqb2JOYW1lLFxuICAgICAgbWVzc2FnZTogam9iSGFuZGxlci5zZXRNZXNzYWdlLmJpbmQoam9iSGFuZGxlciksXG4gICAgfTtcblxuICAgIHJldHVybiBqb2JIYW5kbGVyLnNldFJ1bm5pbmcoam9iTmFtZSwgcGFyYW1zKS50aGVuKGpvYlN0YXR1cyA9PiB7XG4gICAgICByZXF1ZXN0LmpvYklkID0gam9iU3RhdHVzLm9iamVjdElkO1xuICAgICAgLy8gcnVuIHRoZSBmdW5jdGlvbiBhc3luY1xuICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGpvYkZ1bmN0aW9uKHJlcXVlc3QpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICByZXN1bHQgPT4ge1xuICAgICAgICAgICAgICBqb2JIYW5kbGVyLnNldFN1Y2NlZWRlZChyZXN1bHQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICAgICAgam9iSGFuZGxlci5zZXRGYWlsZWQoZXJyb3IpO1xuXG4gICAgICAgICAgICAgIC8vICRKTUo6IG1vZGlmaWVkXG4gICAgICAgICAgICAgIC8vIFVzZSBoYW5kbGVyIGRlZmluZWQgaW4gJGVycm9yLmpzXG4gICAgICAgICAgICAgIGlmIChnbG9iYWwuSGFuZGxlSm9iRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBIYW5kbGVKb2JFcnJvcihqb2JOYW1lLCBwYXJhbXMsIGVycm9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnWC1QYXJzZS1Kb2ItU3RhdHVzLUlkJzogam9iU3RhdHVzLm9iamVjdElkLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZToge30sXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZVJlc3BvbnNlT2JqZWN0KHVzZXJTdHJpbmcgLyogJEpNSjogTW9kaWZpZWQgaW4gZm9yay4gKi8sIHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgICAgICByZXN1bHQ6IFBhcnNlLl9lbmNvZGUocmVzdWx0KSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24gKG1lc3NhZ2UpIHtcblxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIC8vICRKTUo6IE1vZGlmaWVkIGluIGZvcmsuXG4gICAgICAgIGlmIChtZXNzYWdlIGluc3RhbmNlb2YgRXJyb3IpIHtcblxuICAgICAgICAgIGlmIChtZXNzYWdlIGluc3RhbmNlb2YgQ2xvdWRFcnJvcikge1xuICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UubWVzc2FnZTtcbiAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAvLyBVc2UgaGFuZGxlciBkZWZpbmVkIGluICRlcnJvci5qc1xuICAgICAgICAgICAgaWYgKGdsb2JhbC5IYW5kbGVTZXJ2ZXJDcmFzaCkge1xuICAgICAgICAgICAgICBIYW5kbGVTZXJ2ZXJDcmFzaChtZXNzYWdlLnN0YWNrLCB1c2VyU3RyaW5nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGV4cG9ydHMuUkVQTEFDRV9DUkFTSF9FUlJPUlNfV0lUSF9NRVNTQUdFKSB7XG4gICAgICAgICAgICAgIC8vIFJlcGxhY2UgY3Jhc2ggZXJyb3IgbWVzc2FnZSBmb3IgY2xpZW50cy5cbiAgICAgICAgICAgICAgbWVzc2FnZSA9ICdTb21ldGhpbmcgd2VudCB3cm9uZy4gUGxlYXNlIHRyeSBhZ2FpbiBvciBjb250YWN0IHN1cHBvcnQuJzsgIFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UubWVzc2FnZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWVzc2FnZSA9ICdTb21ldGhpbmcgd2VudCB3cm9uZy4gUGxlYXNlIHRyeSBhZ2FpbiBvciBjb250YWN0IHN1cHBvcnQuJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIChtZXNzYWdlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgLy8gICBtZXNzYWdlID0gbWVzc2FnZS5tZXNzYWdlO1xuICAgICAgICAgIC8vIH1cbiAgICAgICAgICBcbiAgICAgICAgICBjb25zdCBlcnJvciA9IHRyaWdnZXJzLnJlc29sdmVFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xuXG4gICAgICB9LFxuICAgIH07XG4gIH1cbiAgc3RhdGljIGhhbmRsZUNsb3VkRnVuY3Rpb24ocmVxKSB7XG4gICAgY29uc3QgZnVuY3Rpb25OYW1lID0gcmVxLnBhcmFtcy5mdW5jdGlvbk5hbWU7XG4gICAgY29uc3QgYXBwbGljYXRpb25JZCA9IHJlcS5jb25maWcuYXBwbGljYXRpb25JZDtcbiAgICBjb25zdCB0aGVGdW5jdGlvbiA9IHRyaWdnZXJzLmdldEZ1bmN0aW9uKGZ1bmN0aW9uTmFtZSwgYXBwbGljYXRpb25JZCk7XG5cbiAgICBpZiAoIXRoZUZ1bmN0aW9uKSB7XG4gICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuU0NSSVBUX0ZBSUxFRCwgYEludmFsaWQgZnVuY3Rpb246IFwiJHtmdW5jdGlvbk5hbWV9XCJgKTtcbiAgICB9XG4gICAgbGV0IHBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe30sIHJlcS5ib2R5LCByZXEucXVlcnkpO1xuICAgIHBhcmFtcyA9IHBhcnNlUGFyYW1zKHBhcmFtcyk7XG4gICAgY29uc3QgcmVxdWVzdCA9IHtcbiAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgbWFzdGVyOiByZXEuYXV0aCAmJiByZXEuYXV0aC5pc01hc3RlcixcbiAgICAgIHVzZXI6IHJlcS5hdXRoICYmIHJlcS5hdXRoLnVzZXIsXG4gICAgICBpbnN0YWxsYXRpb25JZDogcmVxLmluZm8uaW5zdGFsbGF0aW9uSWQsXG4gICAgICBsb2c6IHJlcS5jb25maWcubG9nZ2VyQ29udHJvbGxlcixcbiAgICAgIGhlYWRlcnM6IHJlcS5jb25maWcuaGVhZGVycyxcbiAgICAgIGlwOiByZXEuY29uZmlnLmlwLFxuICAgICAgZnVuY3Rpb25OYW1lLFxuICAgICAgY29udGV4dDogcmVxLmluZm8uY29udGV4dCxcbiAgICB9O1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGNvbnN0IHVzZXJTdHJpbmcgPSByZXEuYXV0aCAmJiByZXEuYXV0aC51c2VyID8gcmVxLmF1dGgudXNlci5pZCA6IHVuZGVmaW5lZDtcbiAgICAgIGNvbnN0IGNsZWFuSW5wdXQgPSBsb2dnZXIudHJ1bmNhdGVMb2dNZXNzYWdlKEpTT04uc3RyaW5naWZ5KHBhcmFtcykpO1xuICAgICAgY29uc3QgeyBzdWNjZXNzLCBlcnJvciB9ID0gRnVuY3Rpb25zUm91dGVyLmNyZWF0ZVJlc3BvbnNlT2JqZWN0KFxuICAgICAgICB1c2VyU3RyaW5nLCAvKiAkSk1KOiBNb2RpZmllZCBpbiBmb3JrLiAqL1xuICAgICAgICByZXN1bHQgPT4ge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjbGVhblJlc3VsdCA9IGxvZ2dlci50cnVuY2F0ZUxvZ01lc3NhZ2UoSlNPTi5zdHJpbmdpZnkocmVzdWx0LnJlc3BvbnNlLnJlc3VsdCkpO1xuICAgICAgICAgICAgbG9nZ2VyLmluZm8oXG4gICAgICAgICAgICAgIGBSYW4gY2xvdWQgZnVuY3Rpb24gJHtmdW5jdGlvbk5hbWV9IGZvciB1c2VyICR7dXNlclN0cmluZ30gd2l0aDpcXG4gIElucHV0OiAke2NsZWFuSW5wdXR9XFxuICBSZXN1bHQ6ICR7Y2xlYW5SZXN1bHR9YCxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uTmFtZSxcbiAgICAgICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgICAgICAgICAgdXNlcjogdXNlclN0cmluZyxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihcbiAgICAgICAgICAgICAgYEZhaWxlZCBydW5uaW5nIGNsb3VkIGZ1bmN0aW9uICR7ZnVuY3Rpb25OYW1lfSBmb3IgdXNlciAke3VzZXJTdHJpbmd9IHdpdGg6XFxuICBJbnB1dDogJHtjbGVhbklucHV0fVxcbiAgRXJyb3I6IGAgK1xuICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGVycm9yKSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uTmFtZSxcbiAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgICAgICAgICAgdXNlcjogdXNlclN0cmluZyxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG5cblxuICAgICAgICAgICAgLy8gJEpNSjogbW9kaWZpZWRcbiAgICAgICAgICAgIC8vIFVzZSBoYW5kbGVyIGRlZmluZWQgaW4gJGVycm9yLmpzXG4gICAgICAgICAgICBpZiAoZ2xvYmFsLkhhbmRsZUNsb3VkRnVuY3Rpb25FcnJvcikge1xuICAgICAgICAgICAgICBIYW5kbGVDbG91ZEZ1bmN0aW9uRXJyb3IoZnVuY3Rpb25OYW1lLCBwYXJhbXMsIGVycm9yLCB1c2VyU3RyaW5nKTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRyaWdnZXJzLm1heWJlUnVuVmFsaWRhdG9yKHJlcXVlc3QsIGZ1bmN0aW9uTmFtZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhlRnVuY3Rpb24ocmVxdWVzdCk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKHN1Y2Nlc3MsIGVycm9yKTtcbiAgICB9KTtcbiAgfVxufVxuIl19